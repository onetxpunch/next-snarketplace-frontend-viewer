type Block {
  blockHeight: Int
  canonical: Boolean
  creator: String
  creatorAccount: BlockCreatorAccount
  dateTime: DateTime
  protocolState: BlockProtocolState
  receivedTime: DateTime
  snarkFees: Long
  snarkJobs: [BlockSnarkJob]
  stateHash: String
  stateHashField: String
  transactions: BlockTransaction
  txFees: Long
  winnerAccount: BlockWinnerAccount
}

type BlockCreatorAccount {
  publicKey: String
}

input BlockCreatorAccountInsertInput {
  publicKey: String
}

input BlockCreatorAccountQueryInput {
  publicKey_gt: String
  OR: [BlockCreatorAccountQueryInput!]
  publicKey_lte: String
  publicKey_nin: [String]
  publicKey_ne: String
  publicKey_gte: String
  publicKey_in: [String]
  AND: [BlockCreatorAccountQueryInput!]
  publicKey: String
  publicKey_lt: String
  publicKey_exists: Boolean
}

input BlockCreatorAccountUpdateInput {
  publicKey_unset: Boolean
  publicKey: String
}

input BlockInsertInput {
  protocolState: BlockProtocolStateInsertInput
  snarkJobs: [BlockSnarkJobInsertInput]
  canonical: Boolean
  creator: String
  dateTime: DateTime
  stateHash: String
  receivedTime: DateTime
  stateHashField: String
  transactions: BlockTransactionInsertInput
  winnerAccount: BlockWinnerAccountInsertInput
  blockHeight: Int
  creatorAccount: BlockCreatorAccountInsertInput
}

type BlockProtocolState {
  blockchainState: BlockProtocolStateBlockchainState
  consensusState: BlockProtocolStateConsensusState
  previousStateHash: String
}

type BlockProtocolStateBlockchainState {
  date: Long
  snarkedLedgerHash: String
  stagedLedgerHash: String
  utcDate: Long
}

input BlockProtocolStateBlockchainStateInsertInput {
  utcDate: Long
  date: Long
  snarkedLedgerHash: String
  stagedLedgerHash: String
}

input BlockProtocolStateBlockchainStateQueryInput {
  snarkedLedgerHash_exists: Boolean
  utcDate_lte: Long
  utcDate_nin: [Long]
  stagedLedgerHash_ne: String
  utcDate_ne: Long
  stagedLedgerHash_lte: String
  stagedLedgerHash_gte: String
  date: Long
  utcDate: Long
  snarkedLedgerHash_nin: [String]
  stagedLedgerHash_exists: Boolean
  snarkedLedgerHash_gt: String
  stagedLedgerHash: String
  date_exists: Boolean
  snarkedLedgerHash_ne: String
  utcDate_in: [Long]
  stagedLedgerHash_lt: String
  date_gt: Long
  utcDate_lt: Long
  utcDate_exists: Boolean
  date_ne: Long
  utcDate_gte: Long
  snarkedLedgerHash_in: [String]
  snarkedLedgerHash: String
  OR: [BlockProtocolStateBlockchainStateQueryInput!]
  snarkedLedgerHash_lte: String
  utcDate_gt: Long
  snarkedLedgerHash_lt: String
  stagedLedgerHash_nin: [String]
  date_in: [Long]
  stagedLedgerHash_gt: String
  stagedLedgerHash_in: [String]
  snarkedLedgerHash_gte: String
  date_nin: [Long]
  date_lte: Long
  AND: [BlockProtocolStateBlockchainStateQueryInput!]
  date_lt: Long
  date_gte: Long
}

input BlockProtocolStateBlockchainStateUpdateInput {
  date: Long
  date_unset: Boolean
  snarkedLedgerHash: String
  snarkedLedgerHash_unset: Boolean
  stagedLedgerHash: String
  stagedLedgerHash_unset: Boolean
  utcDate: Long
  utcDate_unset: Boolean
}

type BlockProtocolStateConsensusState {
  blockHeight: Int
  blockchainLength: Int
  epoch: Int
  epochCount: Int
  hasAncestorInSameCheckpointWindow: Boolean
  lastVrfOutput: String
  minWindowDensity: Int
  nextEpochData: BlockProtocolStateConsensusStateNextEpochDatum
  slot: Int
  slotSinceGenesis: Int
  stakingEpochData: BlockProtocolStateConsensusStateStakingEpochDatum
  totalCurrency: Float
}

input BlockProtocolStateConsensusStateInsertInput {
  nextEpochData: BlockProtocolStateConsensusStateNextEpochDatumInsertInput
  slot: Int
  stakingEpochData: BlockProtocolStateConsensusStateStakingEpochDatumInsertInput
  epoch: Int
  epochCount: Int
  minWindowDensity: Int
  totalCurrency: Float
  hasAncestorInSameCheckpointWindow: Boolean
  lastVrfOutput: String
  slotSinceGenesis: Int
  blockHeight: Int
  blockchainLength: Int
}

type BlockProtocolStateConsensusStateNextEpochDatum {
  epochLength: Int
  ledger: BlockProtocolStateConsensusStateNextEpochDatumLedger
  lockCheckpoint: String
  seed: String
  startCheckpoint: String
}

input BlockProtocolStateConsensusStateNextEpochDatumInsertInput {
  lockCheckpoint: String
  seed: String
  startCheckpoint: String
  epochLength: Int
  ledger: BlockProtocolStateConsensusStateNextEpochDatumLedgerInsertInput
}

type BlockProtocolStateConsensusStateNextEpochDatumLedger {
  hash: String
  totalCurrency: Float
}

input BlockProtocolStateConsensusStateNextEpochDatumLedgerInsertInput {
  hash: String
  totalCurrency: Float
}

input BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput {
  totalCurrency_gte: Float
  OR: [BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput!]
  totalCurrency: Float
  totalCurrency_exists: Boolean
  totalCurrency_ne: Float
  totalCurrency_lte: Float
  hash_ne: String
  totalCurrency_gt: Float
  AND: [BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput!]
  hash_in: [String]
  totalCurrency_nin: [Float]
  hash_nin: [String]
  hash_exists: Boolean
  totalCurrency_in: [Float]
  hash_lte: String
  hash_gte: String
  hash_gt: String
  hash_lt: String
  totalCurrency_lt: Float
  hash: String
}

input BlockProtocolStateConsensusStateNextEpochDatumLedgerUpdateInput {
  hash: String
  hash_unset: Boolean
  totalCurrency: Float
  totalCurrency_unset: Boolean
  totalCurrency_inc: Float
}

input BlockProtocolStateConsensusStateNextEpochDatumQueryInput {
  ledger_exists: Boolean
  startCheckpoint_lte: String
  lockCheckpoint: String
  startCheckpoint_gt: String
  epochLength_ne: Int
  seed: String
  seed_lte: String
  epochLength_gte: Int
  epochLength_gt: Int
  seed_lt: String
  epochLength_exists: Boolean
  lockCheckpoint_gt: String
  startCheckpoint_in: [String]
  startCheckpoint_exists: Boolean
  AND: [BlockProtocolStateConsensusStateNextEpochDatumQueryInput!]
  OR: [BlockProtocolStateConsensusStateNextEpochDatumQueryInput!]
  seed_nin: [String]
  startCheckpoint_gte: String
  startCheckpoint_lt: String
  lockCheckpoint_in: [String]
  epochLength_lte: Int
  ledger: BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput
  epochLength_lt: Int
  seed_ne: String
  lockCheckpoint_nin: [String]
  startCheckpoint: String
  seed_in: [String]
  epochLength_in: [Int]
  startCheckpoint_ne: String
  seed_exists: Boolean
  seed_gt: String
  epochLength_nin: [Int]
  lockCheckpoint_exists: Boolean
  lockCheckpoint_ne: String
  lockCheckpoint_gte: String
  startCheckpoint_nin: [String]
  seed_gte: String
  epochLength: Int
  lockCheckpoint_lt: String
  lockCheckpoint_lte: String
}

input BlockProtocolStateConsensusStateNextEpochDatumUpdateInput {
  seed: String
  seed_unset: Boolean
  startCheckpoint_unset: Boolean
  epochLength_unset: Boolean
  startCheckpoint: String
  epochLength_inc: Int
  lockCheckpoint: String
  lockCheckpoint_unset: Boolean
  epochLength: Int
  ledger: BlockProtocolStateConsensusStateNextEpochDatumLedgerUpdateInput
  ledger_unset: Boolean
}

input BlockProtocolStateConsensusStateQueryInput {
  epochCount_lt: Int
  slot_gt: Int
  slot_gte: Int
  blockHeight_exists: Boolean
  epoch_in: [Int]
  blockHeight: Int
  totalCurrency_in: [Float]
  lastVrfOutput: String
  minWindowDensity_gt: Int
  epoch_lt: Int
  epochCount_lte: Int
  slotSinceGenesis_lt: Int
  epochCount_gt: Int
  stakingEpochData_exists: Boolean
  epoch_ne: Int
  lastVrfOutput_lte: String
  slot: Int
  slot_in: [Int]
  blockchainLength_gt: Int
  blockHeight_lt: Int
  epoch_nin: [Int]
  totalCurrency_lte: Float
  slot_exists: Boolean
  hasAncestorInSameCheckpointWindow_exists: Boolean
  slotSinceGenesis_exists: Boolean
  epochCount_gte: Int
  totalCurrency_lt: Float
  epochCount_exists: Boolean
  slot_lt: Int
  lastVrfOutput_exists: Boolean
  blockchainLength_lte: Int
  epoch: Int
  totalCurrency_gt: Float
  blockHeight_nin: [Int]
  totalCurrency_gte: Float
  lastVrfOutput_lt: String
  blockchainLength_in: [Int]
  blockHeight_ne: Int
  epoch_lte: Int
  blockchainLength_gte: Int
  slotSinceGenesis_gte: Int
  slot_ne: Int
  epochCount_in: [Int]
  slotSinceGenesis_in: [Int]
  minWindowDensity_nin: [Int]
  epochCount_ne: Int
  minWindowDensity_gte: Int
  blockHeight_gte: Int
  hasAncestorInSameCheckpointWindow: Boolean
  blockchainLength_ne: Int
  blockHeight_lte: Int
  minWindowDensity: Int
  epoch_gte: Int
  epoch_gt: Int
  stakingEpochData: BlockProtocolStateConsensusStateStakingEpochDatumQueryInput
  lastVrfOutput_nin: [String]
  totalCurrency: Float
  minWindowDensity_lt: Int
  totalCurrency_ne: Float
  OR: [BlockProtocolStateConsensusStateQueryInput!]
  slotSinceGenesis_lte: Int
  blockchainLength_lt: Int
  lastVrfOutput_ne: String
  nextEpochData: BlockProtocolStateConsensusStateNextEpochDatumQueryInput
  hasAncestorInSameCheckpointWindow_ne: Boolean
  slotSinceGenesis: Int
  lastVrfOutput_gte: String
  epoch_exists: Boolean
  minWindowDensity_exists: Boolean
  slotSinceGenesis_gt: Int
  minWindowDensity_lte: Int
  blockHeight_gt: Int
  epochCount_nin: [Int]
  minWindowDensity_in: [Int]
  epochCount: Int
  slotSinceGenesis_ne: Int
  nextEpochData_exists: Boolean
  totalCurrency_exists: Boolean
  slot_lte: Int
  blockchainLength: Int
  lastVrfOutput_in: [String]
  blockchainLength_exists: Boolean
  AND: [BlockProtocolStateConsensusStateQueryInput!]
  lastVrfOutput_gt: String
  blockHeight_in: [Int]
  blockchainLength_nin: [Int]
  totalCurrency_nin: [Float]
  slotSinceGenesis_nin: [Int]
  minWindowDensity_ne: Int
  slot_nin: [Int]
}

type BlockProtocolStateConsensusStateStakingEpochDatum {
  epochLength: Int
  ledger: BlockProtocolStateConsensusStateStakingEpochDatumLedger
  lockCheckpoint: String
  seed: String
  startCheckpoint: String
}

input BlockProtocolStateConsensusStateStakingEpochDatumInsertInput {
  seed: String
  startCheckpoint: String
  epochLength: Int
  ledger: BlockProtocolStateConsensusStateStakingEpochDatumLedgerInsertInput
  lockCheckpoint: String
}

type BlockProtocolStateConsensusStateStakingEpochDatumLedger {
  hash: String
  totalCurrency: Float
}

input BlockProtocolStateConsensusStateStakingEpochDatumLedgerInsertInput {
  hash: String
  totalCurrency: Float
}

input BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput {
  hash: String
  hash_exists: Boolean
  totalCurrency_lte: Float
  totalCurrency_gt: Float
  hash_gte: String
  hash_nin: [String]
  totalCurrency_nin: [Float]
  totalCurrency: Float
  OR: [BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput!]
  hash_gt: String
  totalCurrency_in: [Float]
  totalCurrency_lt: Float
  totalCurrency_ne: Float
  hash_ne: String
  AND: [BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput!]
  totalCurrency_gte: Float
  hash_lt: String
  hash_lte: String
  hash_in: [String]
  totalCurrency_exists: Boolean
}

input BlockProtocolStateConsensusStateStakingEpochDatumLedgerUpdateInput {
  totalCurrency: Float
  totalCurrency_inc: Float
  totalCurrency_unset: Boolean
  hash: String
  hash_unset: Boolean
}

input BlockProtocolStateConsensusStateStakingEpochDatumQueryInput {
  startCheckpoint_gte: String
  seed_lte: String
  startCheckpoint: String
  ledger: BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput
  startCheckpoint_in: [String]
  lockCheckpoint_nin: [String]
  seed_nin: [String]
  lockCheckpoint: String
  epochLength_exists: Boolean
  epochLength_gte: Int
  startCheckpoint_lte: String
  epochLength: Int
  startCheckpoint_ne: String
  seed_in: [String]
  lockCheckpoint_ne: String
  seed_ne: String
  seed_gt: String
  epochLength_in: [Int]
  OR: [BlockProtocolStateConsensusStateStakingEpochDatumQueryInput!]
  seed_lt: String
  lockCheckpoint_exists: Boolean
  seed: String
  epochLength_lt: Int
  ledger_exists: Boolean
  lockCheckpoint_lt: String
  startCheckpoint_exists: Boolean
  startCheckpoint_nin: [String]
  startCheckpoint_lt: String
  lockCheckpoint_in: [String]
  lockCheckpoint_lte: String
  epochLength_ne: Int
  epochLength_nin: [Int]
  lockCheckpoint_gt: String
  lockCheckpoint_gte: String
  epochLength_lte: Int
  startCheckpoint_gt: String
  seed_exists: Boolean
  seed_gte: String
  epochLength_gt: Int
  AND: [BlockProtocolStateConsensusStateStakingEpochDatumQueryInput!]
}

input BlockProtocolStateConsensusStateStakingEpochDatumUpdateInput {
  epochLength_inc: Int
  lockCheckpoint: String
  epochLength: Int
  epochLength_unset: Boolean
  seed_unset: Boolean
  ledger: BlockProtocolStateConsensusStateStakingEpochDatumLedgerUpdateInput
  ledger_unset: Boolean
  lockCheckpoint_unset: Boolean
  seed: String
  startCheckpoint: String
  startCheckpoint_unset: Boolean
}

input BlockProtocolStateConsensusStateUpdateInput {
  minWindowDensity_unset: Boolean
  blockHeight_unset: Boolean
  totalCurrency: Float
  epoch_inc: Int
  epoch_unset: Boolean
  hasAncestorInSameCheckpointWindow_unset: Boolean
  epochCount: Int
  totalCurrency_unset: Boolean
  lastVrfOutput_unset: Boolean
  epochCount_inc: Int
  slotSinceGenesis_unset: Boolean
  minWindowDensity: Int
  epoch: Int
  nextEpochData: BlockProtocolStateConsensusStateNextEpochDatumUpdateInput
  blockHeight: Int
  stakingEpochData_unset: Boolean
  slot_inc: Int
  epochCount_unset: Boolean
  slotSinceGenesis_inc: Int
  lastVrfOutput: String
  hasAncestorInSameCheckpointWindow: Boolean
  nextEpochData_unset: Boolean
  slot_unset: Boolean
  minWindowDensity_inc: Int
  blockchainLength: Int
  blockchainLength_inc: Int
  totalCurrency_inc: Float
  stakingEpochData: BlockProtocolStateConsensusStateStakingEpochDatumUpdateInput
  blockHeight_inc: Int
  slotSinceGenesis: Int
  blockchainLength_unset: Boolean
  slot: Int
}

input BlockProtocolStateInsertInput {
  blockchainState: BlockProtocolStateBlockchainStateInsertInput
  consensusState: BlockProtocolStateConsensusStateInsertInput
  previousStateHash: String
}

input BlockProtocolStateQueryInput {
  OR: [BlockProtocolStateQueryInput!]
  consensusState: BlockProtocolStateConsensusStateQueryInput
  previousStateHash_ne: String
  consensusState_exists: Boolean
  previousStateHash: String
  previousStateHash_nin: [String]
  previousStateHash_lt: String
  previousStateHash_gte: String
  previousStateHash_exists: Boolean
  previousStateHash_lte: String
  previousStateHash_in: [String]
  previousStateHash_gt: String
  blockchainState_exists: Boolean
  blockchainState: BlockProtocolStateBlockchainStateQueryInput
  AND: [BlockProtocolStateQueryInput!]
}

input BlockProtocolStateUpdateInput {
  previousStateHash: String
  previousStateHash_unset: Boolean
  blockchainState: BlockProtocolStateBlockchainStateUpdateInput
  blockchainState_unset: Boolean
  consensusState: BlockProtocolStateConsensusStateUpdateInput
  consensusState_unset: Boolean
}

input BlockQueryInput {
  creator: String
  stateHash: String
  dateTime_ne: DateTime
  receivedTime_nin: [DateTime]
  creator_exists: Boolean
  dateTime_lte: DateTime
  stateHash_exists: Boolean
  dateTime_exists: Boolean
  blockHeight_lte: Int
  stateHashField_gte: String
  stateHash_gte: String
  snarkJobs_exists: Boolean
  blockHeight_ne: Int
  creator_gte: String
  stateHash_nin: [String]
  dateTime_lt: DateTime
  creator_in: [String]
  blockHeight_lt: Int
  stateHash_gt: String
  protocolState: BlockProtocolStateQueryInput
  canonical_exists: Boolean
  receivedTime_ne: DateTime
  blockHeight_gt: Int
  dateTime_nin: [DateTime]
  stateHash_lte: String
  stateHashField_ne: String
  canonical_ne: Boolean
  stateHash_lt: String
  receivedTime_in: [DateTime]
  snarkJobs: [BlockSnarkJobQueryInput]
  stateHashField: String
  creator_gt: String
  receivedTime_exists: Boolean
  creatorAccount_exists: Boolean
  stateHash_ne: String
  canonical: Boolean
  transactions_exists: Boolean
  stateHash_in: [String]
  blockHeight: Int
  creatorAccount: BlockCreatorAccountQueryInput
  stateHashField_lt: String
  creator_lt: String
  creator_lte: String
  dateTime: DateTime
  winnerAccount_exists: Boolean
  OR: [BlockQueryInput!]
  receivedTime_gt: DateTime
  blockHeight_gte: Int
  stateHashField_exists: Boolean
  receivedTime: DateTime
  creator_nin: [String]
  stateHashField_lte: String
  winnerAccount: BlockWinnerAccountQueryInput
  stateHashField_nin: [String]
  AND: [BlockQueryInput!]
  receivedTime_lte: DateTime
  transactions: BlockTransactionQueryInput
  blockHeight_in: [Int]
  dateTime_in: [DateTime]
  receivedTime_lt: DateTime
  stateHashField_in: [String]
  blockHeight_nin: [Int]
  snarkJobs_nin: [BlockSnarkJobQueryInput]
  blockHeight_exists: Boolean
  dateTime_gt: DateTime
  receivedTime_gte: DateTime
  protocolState_exists: Boolean
  creator_ne: String
  stateHashField_gt: String
  snarkJobs_in: [BlockSnarkJobQueryInput]
  dateTime_gte: DateTime
}

type BlockSnarkJob {
  blockHeight: Int
  blockStateHash: String
  dateTime: DateTime
  fee: Int
  prover: String
  workIds: [Int]
}

input BlockSnarkJobInsertInput {
  prover: String
  workIds: [Int]
  blockHeight: Int
  blockStateHash: String
  dateTime: DateTime
  fee: Int
}

input BlockSnarkJobQueryInput {
  fee_gt: Int
  prover_gt: String
  blockStateHash_gte: String
  dateTime_lte: DateTime
  blockHeight_nin: [Int]
  fee: Int
  workIds_exists: Boolean
  dateTime: DateTime
  dateTime_gte: DateTime
  prover_in: [String]
  OR: [BlockSnarkJobQueryInput!]
  blockStateHash_in: [String]
  AND: [BlockSnarkJobQueryInput!]
  blockStateHash_gt: String
  fee_gte: Int
  fee_ne: Int
  blockHeight_gte: Int
  fee_nin: [Int]
  blockStateHash_ne: String
  blockStateHash_lte: String
  blockHeight_in: [Int]
  dateTime_in: [DateTime]
  prover_lt: String
  dateTime_exists: Boolean
  blockStateHash_lt: String
  workIds_nin: [Int]
  blockStateHash_nin: [String]
  prover_ne: String
  blockStateHash: String
  blockHeight_lt: Int
  prover_nin: [String]
  dateTime_ne: DateTime
  blockHeight_ne: Int
  prover: String
  dateTime_gt: DateTime
  fee_in: [Int]
  blockStateHash_exists: Boolean
  blockHeight_gt: Int
  blockHeight_exists: Boolean
  prover_gte: String
  prover_exists: Boolean
  dateTime_nin: [DateTime]
  fee_lt: Int
  fee_lte: Int
  blockHeight_lte: Int
  prover_lte: String
  blockHeight: Int
  workIds_in: [Int]
  dateTime_lt: DateTime
  workIds: [Int]
  fee_exists: Boolean
}

input BlockSnarkJobUpdateInput {
  prover_unset: Boolean
  blockStateHash: String
  workIds_unset: Boolean
  workIds: [Int]
  blockHeight_unset: Boolean
  fee_unset: Boolean
  fee_inc: Int
  blockHeight: Int
  dateTime_unset: Boolean
  blockStateHash_unset: Boolean
  dateTime: DateTime
  prover: String
  blockHeight_inc: Int
  fee: Int
}

enum BlockSortByInput {
  CREATOR_DESC
  DATETIME_ASC
  DATETIME_DESC
  RECEIVEDTIME_ASC
  RECEIVEDTIME_DESC
  STATEHASH_ASC
  BLOCKHEIGHT_DESC
  CREATOR_ASC
  STATEHASH_DESC
  STATEHASHFIELD_ASC
  STATEHASHFIELD_DESC
  BLOCKHEIGHT_ASC
}

type BlockTransaction {
  coinbase: Long
  coinbaseReceiverAccount: BlockTransactionCoinbaseReceiverAccount
  feeTransfer: [BlockTransactionFeeTransfer]
  userCommands: [BlockTransactionUserCommand]
}

type BlockTransactionCoinbaseReceiverAccount {
  publicKey: String
}

input BlockTransactionCoinbaseReceiverAccountInsertInput {
  publicKey: String
}

input BlockTransactionCoinbaseReceiverAccountQueryInput {
  publicKey_lt: String
  publicKey_in: [String]
  publicKey_nin: [String]
  publicKey_gte: String
  AND: [BlockTransactionCoinbaseReceiverAccountQueryInput!]
  OR: [BlockTransactionCoinbaseReceiverAccountQueryInput!]
  publicKey_exists: Boolean
  publicKey_lte: String
  publicKey: String
  publicKey_ne: String
  publicKey_gt: String
}

input BlockTransactionCoinbaseReceiverAccountUpdateInput {
  publicKey: String
  publicKey_unset: Boolean
}

type BlockTransactionFeeTransfer {
  fee: Long
  recipient: String
  type: String
}

input BlockTransactionFeeTransferInsertInput {
  fee: Long
  recipient: String
  type: String
}

input BlockTransactionFeeTransferQueryInput {
  fee_nin: [Long]
  type_lte: String
  recipient: String
  type_exists: Boolean
  fee_gte: Long
  recipient_lte: String
  fee: Long
  type: String
  recipient_gte: String
  fee_in: [Long]
  type_in: [String]
  type_gt: String
  fee_gt: Long
  recipient_lt: String
  type_nin: [String]
  type_lt: String
  AND: [BlockTransactionFeeTransferQueryInput!]
  recipient_gt: String
  type_ne: String
  recipient_nin: [String]
  recipient_ne: String
  recipient_in: [String]
  OR: [BlockTransactionFeeTransferQueryInput!]
  fee_ne: Long
  fee_lt: Long
  fee_exists: Boolean
  fee_lte: Long
  type_gte: String
  recipient_exists: Boolean
}

input BlockTransactionFeeTransferUpdateInput {
  type_unset: Boolean
  fee: Long
  fee_unset: Boolean
  recipient: String
  recipient_unset: Boolean
  type: String
}

input BlockTransactionInsertInput {
  coinbaseReceiverAccount: BlockTransactionCoinbaseReceiverAccountInsertInput
  feeTransfer: [BlockTransactionFeeTransferInsertInput]
  userCommands: [BlockTransactionUserCommandInsertInput]
  coinbase: Long
}

input BlockTransactionQueryInput {
  coinbase_exists: Boolean
  coinbase_lt: Long
  coinbase: Long
  userCommands: [BlockTransactionUserCommandQueryInput]
  OR: [BlockTransactionQueryInput!]
  feeTransfer_exists: Boolean
  userCommands_in: [BlockTransactionUserCommandQueryInput]
  userCommands_exists: Boolean
  coinbase_in: [Long]
  coinbaseReceiverAccount_exists: Boolean
  userCommands_nin: [BlockTransactionUserCommandQueryInput]
  feeTransfer: [BlockTransactionFeeTransferQueryInput]
  feeTransfer_in: [BlockTransactionFeeTransferQueryInput]
  coinbase_lte: Long
  coinbase_nin: [Long]
  coinbase_gte: Long
  coinbaseReceiverAccount: BlockTransactionCoinbaseReceiverAccountQueryInput
  feeTransfer_nin: [BlockTransactionFeeTransferQueryInput]
  coinbase_ne: Long
  coinbase_gt: Long
  AND: [BlockTransactionQueryInput!]
}

input BlockTransactionUpdateInput {
  feeTransfer: [BlockTransactionFeeTransferUpdateInput]
  feeTransfer_unset: Boolean
  userCommands: [BlockTransactionUserCommandUpdateInput]
  userCommands_unset: Boolean
  coinbase: Long
  coinbase_unset: Boolean
  coinbaseReceiverAccount: BlockTransactionCoinbaseReceiverAccountUpdateInput
  coinbaseReceiverAccount_unset: Boolean
}

type BlockTransactionUserCommand {
  amount: Float
  blockHeight: Int
  blockStateHash: String
  dateTime: DateTime
  failureReason: String
  fee: Float
  feePayer: BlockTransactionUserCommandFeePayer
  feeToken: Int
  from: String
  fromAccount: BlockTransactionUserCommandFromAccount
  hash: String
  id: String
  isDelegation: Boolean
  kind: String
  memo: String
  nonce: Int
  receiver: BlockTransactionUserCommandReceiver
  source: BlockTransactionUserCommandSource
  to: String
  toAccount: BlockTransactionUserCommandToAccount
  token: Int
}

type BlockTransactionUserCommandFeePayer {
  token: Int
}

input BlockTransactionUserCommandFeePayerInsertInput {
  token: Int
}

input BlockTransactionUserCommandFeePayerQueryInput {
  token_lte: Int
  OR: [BlockTransactionUserCommandFeePayerQueryInput!]
  token_lt: Int
  AND: [BlockTransactionUserCommandFeePayerQueryInput!]
  token: Int
  token_gt: Int
  token_gte: Int
  token_exists: Boolean
  token_ne: Int
  token_nin: [Int]
  token_in: [Int]
}

input BlockTransactionUserCommandFeePayerUpdateInput {
  token_inc: Int
  token_unset: Boolean
  token: Int
}

type BlockTransactionUserCommandFromAccount {
  token: Int
}

input BlockTransactionUserCommandFromAccountInsertInput {
  token: Int
}

input BlockTransactionUserCommandFromAccountQueryInput {
  token_in: [Int]
  OR: [BlockTransactionUserCommandFromAccountQueryInput!]
  token_gte: Int
  token_lt: Int
  token_lte: Int
  token_exists: Boolean
  token_ne: Int
  token: Int
  AND: [BlockTransactionUserCommandFromAccountQueryInput!]
  token_gt: Int
  token_nin: [Int]
}

input BlockTransactionUserCommandFromAccountUpdateInput {
  token: Int
  token_unset: Boolean
  token_inc: Int
}

input BlockTransactionUserCommandInsertInput {
  dateTime: DateTime
  token: Int
  blockStateHash: String
  feePayer: BlockTransactionUserCommandFeePayerInsertInput
  receiver: BlockTransactionUserCommandReceiverInsertInput
  toAccount: BlockTransactionUserCommandToAccountInsertInput
  nonce: Int
  blockHeight: Int
  isDelegation: Boolean
  memo: String
  amount: Float
  feeToken: Int
  source: BlockTransactionUserCommandSourceInsertInput
  to: String
  fromAccount: BlockTransactionUserCommandFromAccountInsertInput
  kind: String
  id: String
  fee: Float
  hash: String
  from: String
  failureReason: String
}

input BlockTransactionUserCommandQueryInput {
  id_ne: String
  id_exists: Boolean
  memo_gt: String
  memo_lt: String
  dateTime_nin: [DateTime]
  from_gt: String
  blockStateHash: String
  isDelegation: Boolean
  nonce_ne: Int
  fromAccount: BlockTransactionUserCommandFromAccountQueryInput
  dateTime_gte: DateTime
  blockStateHash_nin: [String]
  nonce_gt: Int
  failureReason_gte: String
  from_gte: String
  OR: [BlockTransactionUserCommandQueryInput!]
  id_in: [String]
  amount_gt: Float
  failureReason_nin: [String]
  token_exists: Boolean
  failureReason: String
  token: Int
  token_lt: Int
  fee_exists: Boolean
  from_lt: String
  blockHeight: Int
  to_lt: String
  from_in: [String]
  hash_gte: String
  to_lte: String
  feeToken_ne: Int
  failureReason_lte: String
  toAccount: BlockTransactionUserCommandToAccountQueryInput
  failureReason_in: [String]
  blockHeight_exists: Boolean
  id_gt: String
  kind_ne: String
  memo_exists: Boolean
  feeToken_exists: Boolean
  blockHeight_gt: Int
  fee_gte: Float
  hash_lt: String
  blockHeight_gte: Int
  hash_nin: [String]
  blockStateHash_lt: String
  AND: [BlockTransactionUserCommandQueryInput!]
  dateTime_lte: DateTime
  failureReason_ne: String
  nonce_gte: Int
  failureReason_gt: String
  nonce_lt: Int
  nonce_nin: [Int]
  dateTime: DateTime
  memo_in: [String]
  hash_exists: Boolean
  dateTime_gt: DateTime
  receiver_exists: Boolean
  amount_lte: Float
  fee_nin: [Float]
  id_lte: String
  blockHeight_in: [Int]
  source_exists: Boolean
  memo_ne: String
  blockStateHash_gt: String
  feeToken: Int
  from_nin: [String]
  nonce_exists: Boolean
  blockStateHash_lte: String
  isDelegation_ne: Boolean
  feeToken_lte: Int
  fee_lt: Float
  blockHeight_nin: [Int]
  failureReason_lt: String
  fee: Float
  to_gte: String
  kind_gte: String
  id: String
  hash_gt: String
  from_exists: Boolean
  dateTime_in: [DateTime]
  blockStateHash_exists: Boolean
  fromAccount_exists: Boolean
  to_exists: Boolean
  id_nin: [String]
  id_lt: String
  blockHeight_lt: Int
  memo_nin: [String]
  from_ne: String
  receiver: BlockTransactionUserCommandReceiverQueryInput
  feeToken_lt: Int
  amount_ne: Float
  feeToken_in: [Int]
  token_in: [Int]
  amount_exists: Boolean
  amount_lt: Float
  blockHeight_ne: Int
  blockStateHash_ne: String
  kind_in: [String]
  feePayer_exists: Boolean
  token_ne: Int
  blockStateHash_gte: String
  memo: String
  dateTime_ne: DateTime
  token_lte: Int
  dateTime_exists: Boolean
  to_in: [String]
  hash_ne: String
  kind_exists: Boolean
  feeToken_nin: [Int]
  nonce_lte: Int
  amount_nin: [Float]
  hash: String
  from: String
  kind: String
  to_ne: String
  kind_lte: String
  token_nin: [Int]
  kind_lt: String
  fee_gt: Float
  from_lte: String
  token_gte: Int
  amount: Float
  feePayer: BlockTransactionUserCommandFeePayerQueryInput
  failureReason_exists: Boolean
  id_gte: String
  kind_nin: [String]
  isDelegation_exists: Boolean
  amount_in: [Float]
  blockHeight_lte: Int
  fee_ne: Float
  to_gt: String
  feeToken_gte: Int
  fee_in: [Float]
  kind_gt: String
  source: BlockTransactionUserCommandSourceQueryInput
  feeToken_gt: Int
  nonce_in: [Int]
  blockStateHash_in: [String]
  memo_gte: String
  fee_lte: Float
  to: String
  hash_lte: String
  toAccount_exists: Boolean
  hash_in: [String]
  memo_lte: String
  amount_gte: Float
  token_gt: Int
  dateTime_lt: DateTime
  to_nin: [String]
  nonce: Int
}

type BlockTransactionUserCommandReceiver {
  publicKey: String
}

input BlockTransactionUserCommandReceiverInsertInput {
  publicKey: String
}

input BlockTransactionUserCommandReceiverQueryInput {
  publicKey_lte: String
  publicKey_nin: [String]
  publicKey_gt: String
  publicKey_lt: String
  publicKey_exists: Boolean
  publicKey_ne: String
  publicKey: String
  publicKey_in: [String]
  AND: [BlockTransactionUserCommandReceiverQueryInput!]
  OR: [BlockTransactionUserCommandReceiverQueryInput!]
  publicKey_gte: String
}

input BlockTransactionUserCommandReceiverUpdateInput {
  publicKey: String
  publicKey_unset: Boolean
}

type BlockTransactionUserCommandSource {
  publicKey: String
}

input BlockTransactionUserCommandSourceInsertInput {
  publicKey: String
}

input BlockTransactionUserCommandSourceQueryInput {
  publicKey_lte: String
  AND: [BlockTransactionUserCommandSourceQueryInput!]
  publicKey_gt: String
  publicKey_nin: [String]
  publicKey: String
  publicKey_gte: String
  publicKey_lt: String
  publicKey_in: [String]
  publicKey_ne: String
  OR: [BlockTransactionUserCommandSourceQueryInput!]
  publicKey_exists: Boolean
}

input BlockTransactionUserCommandSourceUpdateInput {
  publicKey: String
  publicKey_unset: Boolean
}

type BlockTransactionUserCommandToAccount {
  token: Int
}

input BlockTransactionUserCommandToAccountInsertInput {
  token: Int
}

input BlockTransactionUserCommandToAccountQueryInput {
  token_gt: Int
  token_gte: Int
  token_lt: Int
  token: Int
  token_in: [Int]
  token_ne: Int
  token_lte: Int
  AND: [BlockTransactionUserCommandToAccountQueryInput!]
  OR: [BlockTransactionUserCommandToAccountQueryInput!]
  token_nin: [Int]
  token_exists: Boolean
}

input BlockTransactionUserCommandToAccountUpdateInput {
  token_unset: Boolean
  token: Int
  token_inc: Int
}

input BlockTransactionUserCommandUpdateInput {
  to_unset: Boolean
  source_unset: Boolean
  nonce: Int
  fee_unset: Boolean
  feeToken_unset: Boolean
  isDelegation_unset: Boolean
  feePayer: BlockTransactionUserCommandFeePayerUpdateInput
  dateTime_unset: Boolean
  fee_inc: Float
  kind_unset: Boolean
  memo_unset: Boolean
  id_unset: Boolean
  fromAccount: BlockTransactionUserCommandFromAccountUpdateInput
  receiver: BlockTransactionUserCommandReceiverUpdateInput
  kind: String
  to: String
  feeToken_inc: Int
  token_inc: Int
  id: String
  toAccount_unset: Boolean
  blockHeight: Int
  fee: Float
  blockHeight_unset: Boolean
  memo: String
  fromAccount_unset: Boolean
  token: Int
  amount_unset: Boolean
  hash_unset: Boolean
  blockStateHash: String
  blockHeight_inc: Int
  nonce_inc: Int
  toAccount: BlockTransactionUserCommandToAccountUpdateInput
  feePayer_unset: Boolean
  from_unset: Boolean
  hash: String
  amount: Float
  amount_inc: Float
  failureReason_unset: Boolean
  isDelegation: Boolean
  nonce_unset: Boolean
  feeToken: Int
  blockStateHash_unset: Boolean
  dateTime: DateTime
  failureReason: String
  source: BlockTransactionUserCommandSourceUpdateInput
  token_unset: Boolean
  from: String
  receiver_unset: Boolean
}

input BlockUpdateInput {
  protocolState: BlockProtocolStateUpdateInput
  receivedTime: DateTime
  blockHeight_unset: Boolean
  dateTime_unset: Boolean
  winnerAccount: BlockWinnerAccountUpdateInput
  snarkJobs: [BlockSnarkJobUpdateInput]
  blockHeight_inc: Int
  creatorAccount_unset: Boolean
  stateHash_unset: Boolean
  winnerAccount_unset: Boolean
  transactions_unset: Boolean
  canonical: Boolean
  transactions: BlockTransactionUpdateInput
  stateHash: String
  protocolState_unset: Boolean
  creatorAccount: BlockCreatorAccountUpdateInput
  stateHashField: String
  creator_unset: Boolean
  dateTime: DateTime
  canonical_unset: Boolean
  receivedTime_unset: Boolean
  snarkJobs_unset: Boolean
  blockHeight: Int
  creator: String
  stateHashField_unset: Boolean
}

type BlockWinnerAccount {
  balance: BlockWinnerAccountBalance
  publicKey: String
}

type BlockWinnerAccountBalance {
  blockHeight: Int
  liquid: Int
  locked: Long
  stateHash: String
  total: Long
  unknown: Long
}

input BlockWinnerAccountBalanceInsertInput {
  locked: Long
  stateHash: String
  total: Long
  unknown: Long
  blockHeight: Int
  liquid: Int
}

input BlockWinnerAccountBalanceQueryInput {
  blockHeight: Int
  total_exists: Boolean
  total_gt: Long
  total: Long
  blockHeight_in: [Int]
  liquid_lt: Int
  stateHash_exists: Boolean
  blockHeight_exists: Boolean
  locked_gte: Long
  total_nin: [Long]
  liquid_lte: Int
  stateHash_in: [String]
  stateHash_gt: String
  blockHeight_nin: [Int]
  unknown_exists: Boolean
  liquid_in: [Int]
  total_lt: Long
  stateHash_lt: String
  locked_lte: Long
  blockHeight_ne: Int
  blockHeight_lt: Int
  unknown_ne: Long
  stateHash_gte: String
  unknown_lte: Long
  unknown_gt: Long
  locked_lt: Long
  total_lte: Long
  liquid_ne: Int
  locked_ne: Long
  total_gte: Long
  stateHash_ne: String
  blockHeight_gte: Int
  liquid_gt: Int
  OR: [BlockWinnerAccountBalanceQueryInput!]
  unknown_gte: Long
  locked_gt: Long
  liquid_gte: Int
  unknown: Long
  blockHeight_gt: Int
  locked_exists: Boolean
  blockHeight_lte: Int
  stateHash_lte: String
  unknown_in: [Long]
  unknown_lt: Long
  locked_nin: [Long]
  total_in: [Long]
  liquid: Int
  liquid_nin: [Int]
  stateHash: String
  unknown_nin: [Long]
  locked_in: [Long]
  stateHash_nin: [String]
  AND: [BlockWinnerAccountBalanceQueryInput!]
  locked: Long
  total_ne: Long
  liquid_exists: Boolean
}

input BlockWinnerAccountBalanceUpdateInput {
  stateHash_unset: Boolean
  unknown_unset: Boolean
  blockHeight_unset: Boolean
  unknown: Long
  liquid: Int
  locked_unset: Boolean
  blockHeight: Int
  blockHeight_inc: Int
  locked: Long
  stateHash: String
  total: Long
  liquid_inc: Int
  total_unset: Boolean
  liquid_unset: Boolean
}

input BlockWinnerAccountInsertInput {
  balance: BlockWinnerAccountBalanceInsertInput
  publicKey: String
}

input BlockWinnerAccountQueryInput {
  publicKey_in: [String]
  balance_exists: Boolean
  publicKey: String
  AND: [BlockWinnerAccountQueryInput!]
  balance: BlockWinnerAccountBalanceQueryInput
  publicKey_gte: String
  publicKey_exists: Boolean
  publicKey_ne: String
  publicKey_lte: String
  publicKey_nin: [String]
  publicKey_gt: String
  OR: [BlockWinnerAccountQueryInput!]
  publicKey_lt: String
}

input BlockWinnerAccountUpdateInput {
  publicKey: String
  publicKey_unset: Boolean
  balance: BlockWinnerAccountBalanceUpdateInput
  balance_unset: Boolean
}

"""
The `DateTime` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar DateTime

type DelegationTotal {
  countDelegates: Int
  totalDelegated: Float
}

type DeleteManyPayload {
  deletedCount: Int!
}

type Feetransfer {
  blockHeight: Int
  blockStateHash: Block
  canonical: Boolean
  dateTime: DateTime
  fee: Int
  recipient: String
  type: String
}

input FeetransferBlockStateHashRelationInput {
  create: BlockInsertInput
  link: String
}

input FeetransferInsertInput {
  blockStateHash: FeetransferBlockStateHashRelationInput
  canonical: Boolean
  dateTime: DateTime
  fee: Int
  recipient: String
  type: String
  blockHeight: Int
}

input FeetransferQueryInput {
  recipient_gte: String
  blockHeight_gte: Int
  dateTime_gte: DateTime
  fee_nin: [Int]
  blockHeight_gt: Int
  dateTime_lt: DateTime
  type_ne: String
  blockHeight_in: [Int]
  fee_ne: Int
  recipient_in: [String]
  type_gt: String
  dateTime_lte: DateTime
  recipient_gt: String
  dateTime_in: [DateTime]
  dateTime_exists: Boolean
  dateTime_gt: DateTime
  type_exists: Boolean
  fee_gt: Int
  recipient_exists: Boolean
  blockStateHash_exists: Boolean
  recipient_lt: String
  blockHeight_exists: Boolean
  fee_exists: Boolean
  blockHeight: Int
  AND: [FeetransferQueryInput!]
  dateTime: DateTime
  recipient: String
  OR: [FeetransferQueryInput!]
  fee_gte: Int
  recipient_lte: String
  canonical_exists: Boolean
  type: String
  type_gte: String
  type_lte: String
  dateTime_ne: DateTime
  type_lt: String
  blockHeight_ne: Int
  recipient_ne: String
  fee_lte: Int
  fee: Int
  blockHeight_lt: Int
  blockHeight_nin: [Int]
  recipient_nin: [String]
  blockStateHash: BlockQueryInput
  type_nin: [String]
  canonical: Boolean
  canonical_ne: Boolean
  fee_in: [Int]
  dateTime_nin: [DateTime]
  type_in: [String]
  fee_lt: Int
  blockHeight_lte: Int
}

enum FeetransferSortByInput {
  FEE_DESC
  RECIPIENT_ASC
  RECIPIENT_DESC
  BLOCKHEIGHT_ASC
  DATETIME_ASC
  BLOCKSTATEHASH_DESC
  DATETIME_DESC
  FEE_ASC
  TYPE_ASC
  TYPE_DESC
  BLOCKHEIGHT_DESC
  BLOCKSTATEHASH_ASC
}

input FeetransferUpdateInput {
  blockHeight_inc: Int
  recipient: String
  blockStateHash_unset: Boolean
  recipient_unset: Boolean
  type_unset: Boolean
  blockStateHash: FeetransferBlockStateHashRelationInput
  dateTime_unset: Boolean
  blockHeight: Int
  type: String
  fee_unset: Boolean
  dateTime: DateTime
  fee_inc: Int
  blockHeight_unset: Boolean
  canonical: Boolean
  canonical_unset: Boolean
  fee: Int
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values in string format to prevent lossy conversions
"""
scalar Long

type Mutation {
  deleteManyBlocks(query: BlockQueryInput): DeleteManyPayload
  deleteManyFeetransfers(query: FeetransferQueryInput): DeleteManyPayload
  deleteManyNextstakes(query: NextstakeQueryInput): DeleteManyPayload
  deleteManySnarks(query: SnarkQueryInput): DeleteManyPayload
  deleteManyStakes(query: StakeQueryInput): DeleteManyPayload
  deleteManyTransactions(query: TransactionQueryInput): DeleteManyPayload
  deleteOneBlock(query: BlockQueryInput!): Block
  deleteOneFeetransfer(query: FeetransferQueryInput!): Feetransfer
  deleteOneNextstake(query: NextstakeQueryInput!): Nextstake
  deleteOneSnark(query: SnarkQueryInput!): Snark
  deleteOneStake(query: StakeQueryInput!): Stake
  deleteOneTransaction(query: TransactionQueryInput!): Transaction
  insertManyBlocks(data: [BlockInsertInput!]!): InsertManyPayload
  insertManyFeetransfers(data: [FeetransferInsertInput!]!): InsertManyPayload
  insertManyNextstakes(data: [NextstakeInsertInput!]!): InsertManyPayload
  insertManySnarks(data: [SnarkInsertInput!]!): InsertManyPayload
  insertManyStakes(data: [StakeInsertInput!]!): InsertManyPayload
  insertManyTransactions(data: [TransactionInsertInput!]!): InsertManyPayload
  insertOneBlock(data: BlockInsertInput!): Block
  insertOneFeetransfer(data: FeetransferInsertInput!): Feetransfer
  insertOneNextstake(data: NextstakeInsertInput!): Nextstake
  insertOneSnark(data: SnarkInsertInput!): Snark
  insertOneStake(data: StakeInsertInput!): Stake
  insertOneTransaction(data: TransactionInsertInput!): Transaction
  replaceOneBlock(query: BlockQueryInput, data: BlockInsertInput!): Block
  replaceOneFeetransfer(query: FeetransferQueryInput, data: FeetransferInsertInput!): Feetransfer
  replaceOneNextstake(query: NextstakeQueryInput, data: NextstakeInsertInput!): Nextstake
  replaceOneSnark(query: SnarkQueryInput, data: SnarkInsertInput!): Snark
  replaceOneStake(query: StakeQueryInput, data: StakeInsertInput!): Stake
  replaceOneTransaction(query: TransactionQueryInput, data: TransactionInsertInput!): Transaction
  updateManyBlocks(query: BlockQueryInput, set: BlockUpdateInput!): UpdateManyPayload
  updateManyFeetransfers(query: FeetransferQueryInput, set: FeetransferUpdateInput!): UpdateManyPayload
  updateManyNextstakes(query: NextstakeQueryInput, set: NextstakeUpdateInput!): UpdateManyPayload
  updateManySnarks(query: SnarkQueryInput, set: SnarkUpdateInput!): UpdateManyPayload
  updateManyStakes(query: StakeQueryInput, set: StakeUpdateInput!): UpdateManyPayload
  updateManyTransactions(set: TransactionUpdateInput!, query: TransactionQueryInput): UpdateManyPayload
  updateOneBlock(query: BlockQueryInput, set: BlockUpdateInput!): Block
  updateOneFeetransfer(query: FeetransferQueryInput, set: FeetransferUpdateInput!): Feetransfer
  updateOneNextstake(query: NextstakeQueryInput, set: NextstakeUpdateInput!): Nextstake
  updateOneSnark(query: SnarkQueryInput, set: SnarkUpdateInput!): Snark
  updateOneStake(query: StakeQueryInput, set: StakeUpdateInput!): Stake
  updateOneTransaction(set: TransactionUpdateInput!, query: TransactionQueryInput): Transaction
  upsertOneBlock(query: BlockQueryInput, data: BlockInsertInput!): Block
  upsertOneFeetransfer(data: FeetransferInsertInput!, query: FeetransferQueryInput): Feetransfer
  upsertOneNextstake(query: NextstakeQueryInput, data: NextstakeInsertInput!): Nextstake
  upsertOneSnark(query: SnarkQueryInput, data: SnarkInsertInput!): Snark
  upsertOneStake(query: StakeQueryInput, data: StakeInsertInput!): Stake
  upsertOneTransaction(query: TransactionQueryInput, data: TransactionInsertInput!): Transaction
}

type NextDelegationTotal {
  countDelegates: Int
  totalDelegated: Float
}

type Nextstake {
  balance: Float
  delegate: String
  ledgerHash: String
  nextDelegationTotals: NextDelegationTotal
  nonce: Int
  permissions: NextstakePermission
  pk: String
  public_key: String
  receipt_chain_hash: String
  timing: NextstakeTiming
  token: Int
  voting_for: String
}

input NextstakeInsertInput {
  nonce: Int
  public_key: String
  receipt_chain_hash: String
  timing: NextstakeTimingInsertInput
  balance: Float
  delegate: String
  ledgerHash: String
  permissions: NextstakePermissionInsertInput
  pk: String
  token: Int
  voting_for: String
}

type NextstakePermission {
  edit_state: String
  send: String
  set_delegate: String
  set_permissions: String
  set_verification_key: String
  stake: Boolean
}

input NextstakePermissionInsertInput {
  set_delegate: String
  set_permissions: String
  set_verification_key: String
  stake: Boolean
  edit_state: String
  send: String
}

input NextstakePermissionQueryInput {
  edit_state: String
  set_delegate_gte: String
  OR: [NextstakePermissionQueryInput!]
  set_permissions_lt: String
  set_verification_key: String
  set_permissions_gte: String
  send_lt: String
  stake_exists: Boolean
  set_delegate_gt: String
  edit_state_lt: String
  set_permissions_in: [String]
  send_ne: String
  send_exists: Boolean
  edit_state_in: [String]
  send: String
  set_verification_key_lte: String
  set_permissions_lte: String
  set_delegate_in: [String]
  send_gte: String
  send_in: [String]
  set_permissions_exists: Boolean
  set_delegate_nin: [String]
  stake_ne: Boolean
  send_nin: [String]
  edit_state_gt: String
  send_gt: String
  set_verification_key_in: [String]
  set_permissions: String
  set_verification_key_gt: String
  set_permissions_gt: String
  set_verification_key_ne: String
  set_permissions_nin: [String]
  set_permissions_ne: String
  set_verification_key_gte: String
  set_verification_key_lt: String
  stake: Boolean
  set_delegate_lt: String
  edit_state_ne: String
  edit_state_nin: [String]
  set_delegate: String
  set_verification_key_exists: Boolean
  edit_state_lte: String
  AND: [NextstakePermissionQueryInput!]
  set_delegate_exists: Boolean
  edit_state_exists: Boolean
  send_lte: String
  set_verification_key_nin: [String]
  set_delegate_lte: String
  set_delegate_ne: String
  edit_state_gte: String
}

input NextstakePermissionUpdateInput {
  edit_state_unset: Boolean
  set_delegate: String
  set_verification_key: String
  send: String
  edit_state: String
  set_delegate_unset: Boolean
  set_permissions: String
  set_permissions_unset: Boolean
  stake_unset: Boolean
  send_unset: Boolean
  set_verification_key_unset: Boolean
  stake: Boolean
}

input NextstakeQueryInput {
  voting_for_gte: String
  ledgerHash_lt: String
  public_key_in: [String]
  balance_gt: Float
  delegate_lte: String
  nonce_ne: Int
  balance_lte: Float
  public_key_lt: String
  timing: NextstakeTimingQueryInput
  ledgerHash: String
  pk: String
  delegate_nin: [String]
  voting_for_exists: Boolean
  token_ne: Int
  ledgerHash_gt: String
  token_exists: Boolean
  voting_for_in: [String]
  token_lte: Int
  receipt_chain_hash_gte: String
  voting_for: String
  pk_lt: String
  pk_exists: Boolean
  token_lt: Int
  balance_ne: Float
  nonce_lte: Int
  token_nin: [Int]
  nonce_gt: Int
  voting_for_gt: String
  receipt_chain_hash_gt: String
  nonce_in: [Int]
  receipt_chain_hash: String
  public_key_gte: String
  pk_nin: [String]
  balance: Float
  delegate_exists: Boolean
  delegate: String
  nonce_exists: Boolean
  token_gte: Int
  public_key_nin: [String]
  token_in: [Int]
  pk_gte: String
  nonce_gte: Int
  receipt_chain_hash_lt: String
  AND: [NextstakeQueryInput!]
  token: Int
  ledgerHash_exists: Boolean
  receipt_chain_hash_ne: String
  pk_ne: String
  ledgerHash_nin: [String]
  delegate_gt: String
  OR: [NextstakeQueryInput!]
  permissions_exists: Boolean
  nonce_lt: Int
  public_key_gt: String
  receipt_chain_hash_lte: String
  public_key_lte: String
  receipt_chain_hash_exists: Boolean
  permissions: NextstakePermissionQueryInput
  token_gt: Int
  nonce: Int
  pk_gt: String
  delegate_ne: String
  delegate_lt: String
  pk_in: [String]
  public_key: String
  receipt_chain_hash_in: [String]
  delegate_gte: String
  public_key_ne: String
  balance_exists: Boolean
  voting_for_lte: String
  balance_gte: Float
  public_key_exists: Boolean
  balance_lt: Float
  timing_exists: Boolean
  voting_for_ne: String
  pk_lte: String
  balance_in: [Float]
  receipt_chain_hash_nin: [String]
  voting_for_nin: [String]
  ledgerHash_lte: String
  ledgerHash_gte: String
  delegate_in: [String]
  ledgerHash_ne: String
  balance_nin: [Float]
  voting_for_lt: String
  nonce_nin: [Int]
  ledgerHash_in: [String]
}

enum NextstakeSortByInput {
  LEDGERHASH_ASC
  VOTING_FOR_DESC
  TOKEN_ASC
  TOKEN_DESC
  BALANCE_ASC
  BALANCE_DESC
  DELEGATE_DESC
  LEDGERHASH_DESC
  PK_DESC
  PUBLIC_KEY_DESC
  VOTING_FOR_ASC
  DELEGATE_ASC
  NONCE_ASC
  PK_ASC
  PUBLIC_KEY_ASC
  RECEIPT_CHAIN_HASH_ASC
  RECEIPT_CHAIN_HASH_DESC
  NONCE_DESC
}

type NextstakeTiming {
  cliff_amount: Float
  cliff_time: Int
  initial_minimum_balance: Float
  vesting_increment: Float
  vesting_period: Int
}

input NextstakeTimingInsertInput {
  vesting_increment: Float
  vesting_period: Int
  cliff_amount: Float
  cliff_time: Int
  initial_minimum_balance: Float
}

input NextstakeTimingQueryInput {
  vesting_increment_in: [Float]
  vesting_period_in: [Int]
  vesting_period: Int
  cliff_amount_exists: Boolean
  cliff_amount_ne: Float
  vesting_period_exists: Boolean
  cliff_time_nin: [Int]
  cliff_amount: Float
  cliff_time_lte: Int
  initial_minimum_balance_exists: Boolean
  cliff_amount_gte: Float
  initial_minimum_balance_gt: Float
  cliff_amount_gt: Float
  vesting_period_lte: Int
  cliff_amount_lte: Float
  cliff_time_in: [Int]
  initial_minimum_balance_gte: Float
  vesting_period_nin: [Int]
  vesting_increment_lt: Float
  initial_minimum_balance_ne: Float
  initial_minimum_balance_lt: Float
  cliff_time_gt: Int
  cliff_amount_lt: Float
  vesting_period_gte: Int
  cliff_amount_in: [Float]
  vesting_increment_nin: [Float]
  vesting_increment: Float
  vesting_increment_gt: Float
  vesting_increment_lte: Float
  AND: [NextstakeTimingQueryInput!]
  cliff_time_ne: Int
  initial_minimum_balance_in: [Float]
  cliff_amount_nin: [Float]
  cliff_time_exists: Boolean
  vesting_increment_ne: Float
  initial_minimum_balance_nin: [Float]
  vesting_period_gt: Int
  initial_minimum_balance: Float
  initial_minimum_balance_lte: Float
  cliff_time_gte: Int
  vesting_increment_gte: Float
  cliff_time_lt: Int
  vesting_increment_exists: Boolean
  vesting_period_lt: Int
  cliff_time: Int
  OR: [NextstakeTimingQueryInput!]
  vesting_period_ne: Int
}

input NextstakeTimingUpdateInput {
  vesting_increment: Float
  vesting_period: Int
  cliff_amount_inc: Float
  vesting_period_inc: Int
  cliff_time: Int
  initial_minimum_balance_unset: Boolean
  cliff_amount_unset: Boolean
  initial_minimum_balance_inc: Float
  cliff_amount: Float
  vesting_increment_unset: Boolean
  cliff_time_unset: Boolean
  vesting_period_unset: Boolean
  cliff_time_inc: Int
  initial_minimum_balance: Float
  vesting_increment_inc: Float
}

input NextstakeUpdateInput {
  receipt_chain_hash: String
  pk: String
  balance_unset: Boolean
  balance: Float
  nonce: Int
  nonce_unset: Boolean
  voting_for: String
  nonce_inc: Int
  permissions: NextstakePermissionUpdateInput
  token_unset: Boolean
  token_inc: Int
  voting_for_unset: Boolean
  delegate_unset: Boolean
  public_key_unset: Boolean
  permissions_unset: Boolean
  ledgerHash: String
  public_key: String
  ledgerHash_unset: Boolean
  pk_unset: Boolean
  receipt_chain_hash_unset: Boolean
  timing: NextstakeTimingUpdateInput
  balance_inc: Float
  token: Int
  delegate: String
  timing_unset: Boolean
}

scalar ObjectId

type Query {
  block(query: BlockQueryInput): Block
  blocks(query: BlockQueryInput, limit: Int = 100, sortBy: BlockSortByInput): [Block]!
  feetransfer(query: FeetransferQueryInput): Feetransfer
  feetransfers(query: FeetransferQueryInput, limit: Int = 100, sortBy: FeetransferSortByInput): [Feetransfer]!
  nextstake(query: NextstakeQueryInput): Nextstake
  nextstakes(limit: Int = 100, sortBy: NextstakeSortByInput, query: NextstakeQueryInput): [Nextstake]!
  snark(query: SnarkQueryInput): Snark
  snarks(limit: Int = 100, sortBy: SnarkSortByInput, query: SnarkQueryInput): [Snark]!
  stake(query: StakeQueryInput): Stake
  stakes(query: StakeQueryInput, limit: Int = 100, sortBy: StakeSortByInput): [Stake]!
  transaction(query: TransactionQueryInput): Transaction
  transactions(query: TransactionQueryInput, limit: Int = 100, sortBy: TransactionSortByInput): [Transaction]!
}

type Snark {
  block: Block
  blockHeight: Int
  canonical: Boolean
  dateTime: DateTime
  fee: Float
  prover: String
  workIds: [Int]
}

input SnarkBlockStateHashRelationInput {
  link: String
  create: BlockInsertInput
}

input SnarkInsertInput {
  blockHeight: Int
  block: SnarkBlockStateHashRelationInput
  canonical: Boolean
  dateTime: DateTime
  fee: Float
  prover: String
  workIds: [Int]
}

input SnarkQueryInput {
  prover_lte: String
  dateTime_nin: [DateTime]
  fee_gt: Float
  fee_gte: Float
  prover_ne: String
  blockHeight_gte: Int
  dateTime: DateTime
  fee_in: [Float]
  dateTime_gte: DateTime
  prover_lt: String
  canonical_exists: Boolean
  prover_gt: String
  canonical: Boolean
  prover_in: [String]
  prover_gte: String
  workIds_exists: Boolean
  fee_lte: Float
  block: BlockQueryInput
  dateTime_exists: Boolean
  block_exists: Boolean
  fee_exists: Boolean
  blockHeight_lte: Int
  workIds_nin: [Int]
  dateTime_ne: DateTime
  blockHeight_gt: Int
  blockHeight_lt: Int
  dateTime_gt: DateTime
  dateTime_lt: DateTime
  workIds_in: [Int]
  OR: [SnarkQueryInput!]
  dateTime_lte: DateTime
  prover: String
  blockHeight_in: [Int]
  AND: [SnarkQueryInput!]
  canonical_ne: Boolean
  fee: Float
  blockHeight: Int
  workIds: [Int]
  blockHeight_exists: Boolean
  fee_nin: [Float]
  fee_ne: Float
  dateTime_in: [DateTime]
  prover_nin: [String]
  prover_exists: Boolean
  fee_lt: Float
  blockHeight_nin: [Int]
  blockHeight_ne: Int
}

enum SnarkSortByInput {
  BLOCKHEIGHT_ASC
  BLOCKHEIGHT_DESC
  DATETIME_DESC
  FEE_ASC
  PROVER_ASC
  BLOCKSTATEHASH_ASC
  BLOCKSTATEHASH_DESC
  DATETIME_ASC
  FEE_DESC
  PROVER_DESC
}

input SnarkUpdateInput {
  canonical: Boolean
  prover: String
  workIds_unset: Boolean
  blockHeight: Int
  workIds: [Int]
  fee_unset: Boolean
  fee: Float
  dateTime_unset: Boolean
  block: SnarkBlockStateHashRelationInput
  dateTime: DateTime
  fee_inc: Float
  prover_unset: Boolean
  blockHeight_inc: Int
  blockHeight_unset: Boolean
  canonical_unset: Boolean
  block_unset: Boolean
}

type Stake {
  balance: Float
  chainId: String
  delegate: String
  delegationTotals: DelegationTotal
  epoch: Int
  ledgerHash: String
  nonce: Int
  permissions: StakePermission
  pk: String
  public_key: String
  receipt_chain_hash: String
  timing: StakeTiming
  token: Int
  voting_for: String
}

input StakeInsertInput {
  epoch: Int
  ledgerHash: String
  permissions: StakePermissionInsertInput
  public_key: String
  balance: Float
  timing: StakeTimingInsertInput
  nonce: Int
  receipt_chain_hash: String
  pk: String
  token: Int
  voting_for: String
  delegate: String
  chainId: String
}

type StakePermission {
  edit_state: String
  send: String
  set_delegate: String
  set_permissions: String
  set_verification_key: String
  stake: Boolean
}

input StakePermissionInsertInput {
  send: String
  set_delegate: String
  set_permissions: String
  set_verification_key: String
  stake: Boolean
  edit_state: String
}

input StakePermissionQueryInput {
  edit_state_exists: Boolean
  edit_state_ne: String
  edit_state_nin: [String]
  stake_ne: Boolean
  send_gte: String
  set_permissions_lt: String
  send_exists: Boolean
  set_delegate: String
  OR: [StakePermissionQueryInput!]
  set_delegate_nin: [String]
  set_delegate_gt: String
  stake_exists: Boolean
  set_delegate_exists: Boolean
  stake: Boolean
  set_delegate_lt: String
  send_in: [String]
  set_verification_key_ne: String
  set_verification_key_gte: String
  set_verification_key: String
  set_permissions_in: [String]
  send: String
  edit_state_in: [String]
  send_lt: String
  set_delegate_lte: String
  AND: [StakePermissionQueryInput!]
  set_permissions: String
  set_delegate_ne: String
  send_lte: String
  set_permissions_nin: [String]
  set_verification_key_lt: String
  send_gt: String
  set_permissions_ne: String
  set_verification_key_gt: String
  set_verification_key_nin: [String]
  send_nin: [String]
  edit_state: String
  edit_state_lte: String
  set_verification_key_in: [String]
  set_permissions_lte: String
  set_verification_key_exists: Boolean
  edit_state_gte: String
  set_verification_key_lte: String
  set_permissions_exists: Boolean
  set_delegate_in: [String]
  edit_state_gt: String
  set_permissions_gte: String
  edit_state_lt: String
  send_ne: String
  set_permissions_gt: String
  set_delegate_gte: String
}

input StakePermissionUpdateInput {
  set_verification_key: String
  set_verification_key_unset: Boolean
  edit_state: String
  stake: Boolean
  set_delegate: String
  set_permissions: String
  set_delegate_unset: Boolean
  send_unset: Boolean
  stake_unset: Boolean
  send: String
  set_permissions_unset: Boolean
  edit_state_unset: Boolean
}

input StakeQueryInput {
  public_key: String
  delegate_nin: [String]
  receipt_chain_hash_gt: String
  receipt_chain_hash_exists: Boolean
  receipt_chain_hash_ne: String
  pk_in: [String]
  nonce: Int
  voting_for_lte: String
  receipt_chain_hash_in: [String]
  token_gt: Int
  receipt_chain_hash_gte: String
  ledgerHash_lte: String
  chainId_lt: String
  balance: Float
  pk: String
  voting_for_gt: String
  public_key_lt: String
  nonce_in: [Int]
  OR: [StakeQueryInput!]
  public_key_in: [String]
  delegate_in: [String]
  public_key_exists: Boolean
  pk_gt: String
  epoch_nin: [Int]
  chainId_lte: String
  voting_for_in: [String]
  AND: [StakeQueryInput!]
  public_key_ne: String
  chainId_ne: String
  delegate_ne: String
  ledgerHash_gte: String
  delegate_gt: String
  pk_nin: [String]
  delegate_lt: String
  public_key_gte: String
  token_in: [Int]
  balance_in: [Float]
  epoch_gte: Int
  chainId_gt: String
  permissions: StakePermissionQueryInput
  receipt_chain_hash: String
  balance_gt: Float
  token: Int
  ledgerHash: String
  chainId: String
  chainId_gte: String
  epoch_exists: Boolean
  delegate_gte: String
  epoch_lt: Int
  receipt_chain_hash_nin: [String]
  receipt_chain_hash_lte: String
  permissions_exists: Boolean
  delegate: String
  balance_nin: [Float]
  delegate_exists: Boolean
  ledgerHash_nin: [String]
  epoch_gt: Int
  ledgerHash_ne: String
  nonce_gt: Int
  token_lt: Int
  nonce_lte: Int
  token_exists: Boolean
  pk_exists: Boolean
  ledgerHash_gt: String
  ledgerHash_lt: String
  voting_for_gte: String
  voting_for_nin: [String]
  token_gte: Int
  token_lte: Int
  balance_lte: Float
  balance_lt: Float
  voting_for: String
  ledgerHash_in: [String]
  nonce_lt: Int
  chainId_in: [String]
  balance_gte: Float
  balance_exists: Boolean
  pk_ne: String
  timing: StakeTimingQueryInput
  voting_for_exists: Boolean
  delegate_lte: String
  epoch_ne: Int
  receipt_chain_hash_lt: String
  chainId_nin: [String]
  nonce_nin: [Int]
  nonce_gte: Int
  nonce_exists: Boolean
  epoch: Int
  token_ne: Int
  voting_for_ne: String
  public_key_lte: String
  nonce_ne: Int
  timing_exists: Boolean
  chainId_exists: Boolean
  pk_gte: String
  token_nin: [Int]
  epoch_in: [Int]
  balance_ne: Float
  public_key_nin: [String]
  epoch_lte: Int
  public_key_gt: String
  pk_lt: String
  voting_for_lt: String
  pk_lte: String
  ledgerHash_exists: Boolean
}

enum StakeSortByInput {
  CHAINID_DESC
  DELEGATE_DESC
  PK_ASC
  PUBLIC_KEY_DESC
  RECEIPT_CHAIN_HASH_DESC
  TOKEN_ASC
  BALANCE_ASC
  BALANCE_DESC
  PK_DESC
  PUBLIC_KEY_ASC
  RECEIPT_CHAIN_HASH_ASC
  TOKEN_DESC
  VOTING_FOR_ASC
  LEDGERHASH_DESC
  CHAINID_ASC
  DELEGATE_ASC
  EPOCH_ASC
  EPOCH_DESC
  NONCE_ASC
  NONCE_DESC
  LEDGERHASH_ASC
  VOTING_FOR_DESC
}

type StakeTiming {
  cliff_amount: Float
  cliff_time: Int
  initial_minimum_balance: Float
  timed_epoch_end: Boolean
  timed_in_epoch: Boolean
  timed_weighting: Float
  untimed_slot: Int
  vesting_increment: Float
  vesting_period: Int
}

input StakeTimingInsertInput {
  cliff_time: Int
  timed_in_epoch: Boolean
  timed_epoch_end: Boolean
  untimed_slot: Int
  initial_minimum_balance: Float
  timed_weighting: Float
  vesting_increment: Float
  vesting_period: Int
  cliff_amount: Float
}

input StakeTimingQueryInput {
  vesting_period: Int
  timed_weighting_exists: Boolean
  vesting_period_lt: Int
  initial_minimum_balance_gt: Float
  timed_weighting_ne: Float
  untimed_slot_nin: [Int]
  untimed_slot_exists: Boolean
  cliff_time: Int
  timed_epoch_end: Boolean
  cliff_amount_ne: Float
  initial_minimum_balance_ne: Float
  initial_minimum_balance_lte: Float
  initial_minimum_balance_lt: Float
  cliff_time_exists: Boolean
  timed_in_epoch_exists: Boolean
  timed_in_epoch_ne: Boolean
  vesting_period_gte: Int
  timed_in_epoch: Boolean
  vesting_increment_nin: [Float]
  cliff_amount_gte: Float
  cliff_amount_nin: [Float]
  cliff_amount_gt: Float
  vesting_period_gt: Int
  cliff_amount_lt: Float
  initial_minimum_balance_exists: Boolean
  cliff_time_lt: Int
  untimed_slot_lt: Int
  untimed_slot_gt: Int
  timed_weighting: Float
  cliff_time_gt: Int
  timed_weighting_lt: Float
  cliff_amount: Float
  initial_minimum_balance: Float
  AND: [StakeTimingQueryInput!]
  vesting_increment_exists: Boolean
  timed_epoch_end_exists: Boolean
  vesting_increment: Float
  timed_weighting_lte: Float
  untimed_slot_lte: Int
  vesting_increment_gt: Float
  timed_weighting_gte: Float
  initial_minimum_balance_gte: Float
  timed_epoch_end_ne: Boolean
  vesting_period_in: [Int]
  untimed_slot_in: [Int]
  vesting_period_nin: [Int]
  cliff_time_nin: [Int]
  vesting_period_lte: Int
  untimed_slot_ne: Int
  vesting_period_exists: Boolean
  timed_weighting_in: [Float]
  cliff_amount_in: [Float]
  cliff_amount_exists: Boolean
  vesting_increment_in: [Float]
  timed_weighting_gt: Float
  vesting_increment_gte: Float
  vesting_increment_lt: Float
  timed_weighting_nin: [Float]
  vesting_increment_ne: Float
  vesting_increment_lte: Float
  vesting_period_ne: Int
  cliff_time_lte: Int
  untimed_slot: Int
  cliff_time_in: [Int]
  initial_minimum_balance_in: [Float]
  cliff_time_ne: Int
  OR: [StakeTimingQueryInput!]
  cliff_amount_lte: Float
  untimed_slot_gte: Int
  initial_minimum_balance_nin: [Float]
  cliff_time_gte: Int
}

input StakeTimingUpdateInput {
  initial_minimum_balance_unset: Boolean
  cliff_time_inc: Int
  cliff_amount: Float
  vesting_increment_unset: Boolean
  timed_epoch_end_unset: Boolean
  timed_weighting_unset: Boolean
  cliff_amount_inc: Float
  cliff_amount_unset: Boolean
  untimed_slot_unset: Boolean
  initial_minimum_balance_inc: Float
  cliff_time: Int
  timed_in_epoch: Boolean
  timed_epoch_end: Boolean
  initial_minimum_balance: Float
  vesting_period: Int
  timed_weighting_inc: Float
  timed_weighting: Float
  vesting_period_inc: Int
  cliff_time_unset: Boolean
  untimed_slot: Int
  vesting_increment_inc: Float
  untimed_slot_inc: Int
  timed_in_epoch_unset: Boolean
  vesting_increment: Float
  vesting_period_unset: Boolean
}

input StakeUpdateInput {
  permissions: StakePermissionUpdateInput
  balance_unset: Boolean
  pk: String
  nonce_unset: Boolean
  ledgerHash_unset: Boolean
  balance: Float
  delegate_unset: Boolean
  nonce: Int
  permissions_unset: Boolean
  epoch: Int
  receipt_chain_hash_unset: Boolean
  balance_inc: Float
  pk_unset: Boolean
  ledgerHash: String
  public_key: String
  token_unset: Boolean
  chainId: String
  nonce_inc: Int
  epoch_unset: Boolean
  voting_for: String
  timing_unset: Boolean
  delegate: String
  public_key_unset: Boolean
  voting_for_unset: Boolean
  token: Int
  chainId_unset: Boolean
  timing: StakeTimingUpdateInput
  token_inc: Int
  epoch_inc: Int
  receipt_chain_hash: String
}

type Transaction {
  amount: Float
  block: Block
  blockHeight: Int
  canonical: Boolean
  dateTime: DateTime
  failureReason: String
  fee: Float
  feePayer: TransactionFeePayer
  feeToken: Int
  from: String
  fromAccount: TransactionFromAccount
  hash: String
  id: String
  isDelegation: Boolean
  kind: String
  memo: String
  nonce: Int
  receiver: TransactionReceiver
  source: TransactionSource
  to: String
  toAccount: TransactionToAccount
  token: Int
}

input TransactionBlockStateHashRelationInput {
  create: BlockInsertInput
  link: String
}

type TransactionFeePayer {
  token: Int
}

input TransactionFeePayerInsertInput {
  token: Int
}

input TransactionFeePayerQueryInput {
  token_gte: Int
  token_lt: Int
  OR: [TransactionFeePayerQueryInput!]
  token_lte: Int
  token_nin: [Int]
  AND: [TransactionFeePayerQueryInput!]
  token_in: [Int]
  token_gt: Int
  token_ne: Int
  token_exists: Boolean
  token: Int
}

input TransactionFeePayerUpdateInput {
  token: Int
  token_inc: Int
  token_unset: Boolean
}

type TransactionFromAccount {
  token: Int
}

input TransactionFromAccountInsertInput {
  token: Int
}

input TransactionFromAccountQueryInput {
  token: Int
  token_in: [Int]
  token_ne: Int
  OR: [TransactionFromAccountQueryInput!]
  token_lte: Int
  token_nin: [Int]
  token_exists: Boolean
  token_gte: Int
  AND: [TransactionFromAccountQueryInput!]
  token_gt: Int
  token_lt: Int
}

input TransactionFromAccountUpdateInput {
  token_inc: Int
  token_unset: Boolean
  token: Int
}

input TransactionInsertInput {
  hash: String
  nonce: Int
  memo: String
  fee: Float
  id: String
  failureReason: String
  feeToken: Int
  toAccount: TransactionToAccountInsertInput
  kind: String
  canonical: Boolean
  dateTime: DateTime
  token: Int
  block: TransactionBlockStateHashRelationInput
  source: TransactionSourceInsertInput
  amount: Float
  feePayer: TransactionFeePayerInsertInput
  blockHeight: Int
  fromAccount: TransactionFromAccountInsertInput
  from: String
  receiver: TransactionReceiverInsertInput
  to: String
  isDelegation: Boolean
}

input TransactionQueryInput {
  dateTime_gte: DateTime
  dateTime_lt: DateTime
  hash_in: [String]
  isDelegation_exists: Boolean
  receiver: TransactionReceiverQueryInput
  hash_lt: String
  token_gte: Int
  blockHeight_exists: Boolean
  toAccount: TransactionToAccountQueryInput
  id_lte: String
  feeToken_gt: Int
  blockHeight_gte: Int
  kind_nin: [String]
  isDelegation: Boolean
  memo_lte: String
  kind_exists: Boolean
  amount_lte: Float
  dateTime_ne: DateTime
  failureReason_ne: String
  source_exists: Boolean
  amount: Float
  to_lte: String
  feeToken_lt: Int
  amount_gt: Float
  to_exists: Boolean
  kind_gte: String
  token_exists: Boolean
  nonce_gte: Int
  hash_gte: String
  from_gte: String
  failureReason_lte: String
  token_nin: [Int]
  id: String
  from_ne: String
  token: Int
  block: BlockQueryInput
  memo_ne: String
  from_exists: Boolean
  dateTime: DateTime
  failureReason_gt: String
  memo_in: [String]
  amount_gte: Float
  feeToken_gte: Int
  memo_gt: String
  dateTime_gt: DateTime
  feeToken_ne: Int
  to_gte: String
  blockHeight: Int
  memo_gte: String
  fee_lte: Float
  feePayer_exists: Boolean
  source: TransactionSourceQueryInput
  OR: [TransactionQueryInput!]
  amount_exists: Boolean
  feeToken_lte: Int
  kind_lte: String
  failureReason_in: [String]
  token_ne: Int
  nonce_exists: Boolean
  blockHeight_lt: Int
  memo_lt: String
  fromAccount_exists: Boolean
  memo: String
  to: String
  to_lt: String
  kind_in: [String]
  to_gt: String
  block_exists: Boolean
  hash_lte: String
  id_lt: String
  blockHeight_nin: [Int]
  from: String
  id_in: [String]
  dateTime_nin: [DateTime]
  nonce_lt: Int
  from_gt: String
  fee_lt: Float
  to_ne: String
  amount_lt: Float
  feePayer: TransactionFeePayerQueryInput
  memo_exists: Boolean
  blockHeight_lte: Int
  from_nin: [String]
  token_lte: Int
  fee_exists: Boolean
  blockHeight_gt: Int
  failureReason_lt: String
  nonce_nin: [Int]
  memo_nin: [String]
  failureReason: String
  canonical: Boolean
  id_gte: String
  nonce: Int
  fromAccount: TransactionFromAccountQueryInput
  hash_exists: Boolean
  feeToken_nin: [Int]
  to_in: [String]
  hash_ne: String
  token_lt: Int
  feeToken_exists: Boolean
  to_nin: [String]
  token_in: [Int]
  canonical_ne: Boolean
  id_nin: [String]
  from_lt: String
  fee_nin: [Float]
  fee_gte: Float
  from_lte: String
  nonce_lte: Int
  hash_nin: [String]
  feeToken_in: [Int]
  isDelegation_ne: Boolean
  nonce_in: [Int]
  hash: String
  failureReason_nin: [String]
  blockHeight_in: [Int]
  amount_in: [Float]
  feeToken: Int
  token_gt: Int
  dateTime_in: [DateTime]
  amount_ne: Float
  amount_nin: [Float]
  blockHeight_ne: Int
  canonical_exists: Boolean
  id_ne: String
  nonce_ne: Int
  nonce_gt: Int
  fee_gt: Float
  fee_ne: Float
  kind_ne: String
  failureReason_gte: String
  kind_gt: String
  from_in: [String]
  fee_in: [Float]
  id_gt: String
  id_exists: Boolean
  toAccount_exists: Boolean
  failureReason_exists: Boolean
  AND: [TransactionQueryInput!]
  dateTime_lte: DateTime
  hash_gt: String
  fee: Float
  receiver_exists: Boolean
  kind_lt: String
  kind: String
  dateTime_exists: Boolean
}

type TransactionReceiver {
  publicKey: String
}

input TransactionReceiverInsertInput {
  publicKey: String
}

input TransactionReceiverQueryInput {
  publicKey_ne: String
  AND: [TransactionReceiverQueryInput!]
  OR: [TransactionReceiverQueryInput!]
  publicKey_gte: String
  publicKey_exists: Boolean
  publicKey_lt: String
  publicKey_in: [String]
  publicKey: String
  publicKey_gt: String
  publicKey_lte: String
  publicKey_nin: [String]
}

input TransactionReceiverUpdateInput {
  publicKey: String
  publicKey_unset: Boolean
}

enum TransactionSortByInput {
  ID_DESC
  KIND_ASC
  KIND_DESC
  MEMO_DESC
  FAILUREREASON_DESC
  NONCE_DESC
  AMOUNT_DESC
  DATETIME_DESC
  FEE_ASC
  FEETOKEN_DESC
  TOKEN_DESC
  AMOUNT_ASC
  HASH_ASC
  FAILUREREASON_ASC
  BLOCKSTATEHASH_ASC
  DATETIME_ASC
  FEETOKEN_ASC
  ID_ASC
  BLOCKHEIGHT_ASC
  FROM_ASC
  FROM_DESC
  MEMO_ASC
  NONCE_ASC
  TO_DESC
  TOKEN_ASC
  FEE_DESC
  BLOCKSTATEHASH_DESC
  HASH_DESC
  TO_ASC
  BLOCKHEIGHT_DESC
}

type TransactionSource {
  publicKey: String
}

input TransactionSourceInsertInput {
  publicKey: String
}

input TransactionSourceQueryInput {
  publicKey: String
  publicKey_exists: Boolean
  publicKey_lt: String
  publicKey_nin: [String]
  publicKey_gt: String
  publicKey_gte: String
  OR: [TransactionSourceQueryInput!]
  publicKey_ne: String
  publicKey_lte: String
  AND: [TransactionSourceQueryInput!]
  publicKey_in: [String]
}

input TransactionSourceUpdateInput {
  publicKey_unset: Boolean
  publicKey: String
}

type TransactionToAccount {
  token: Int
}

input TransactionToAccountInsertInput {
  token: Int
}

input TransactionToAccountQueryInput {
  token_nin: [Int]
  token_exists: Boolean
  token_lt: Int
  AND: [TransactionToAccountQueryInput!]
  token_lte: Int
  token_in: [Int]
  token_ne: Int
  token_gte: Int
  token: Int
  token_gt: Int
  OR: [TransactionToAccountQueryInput!]
}

input TransactionToAccountUpdateInput {
  token_unset: Boolean
  token: Int
  token_inc: Int
}

input TransactionUpdateInput {
  from_unset: Boolean
  toAccount: TransactionToAccountUpdateInput
  fee: Float
  toAccount_unset: Boolean
  nonce_inc: Int
  dateTime_unset: Boolean
  feePayer: TransactionFeePayerUpdateInput
  canonical: Boolean
  nonce_unset: Boolean
  hash_unset: Boolean
  isDelegation: Boolean
  id_unset: Boolean
  amount: Float
  dateTime: DateTime
  source: TransactionSourceUpdateInput
  canonical_unset: Boolean
  failureReason_unset: Boolean
  feeToken_unset: Boolean
  kind: String
  block_unset: Boolean
  nonce: Int
  blockHeight: Int
  receiver: TransactionReceiverUpdateInput
  block: TransactionBlockStateHashRelationInput
  feeToken: Int
  to: String
  to_unset: Boolean
  feeToken_inc: Int
  feePayer_unset: Boolean
  token: Int
  blockHeight_unset: Boolean
  memo: String
  amount_unset: Boolean
  hash: String
  failureReason: String
  id: String
  source_unset: Boolean
  amount_inc: Float
  memo_unset: Boolean
  blockHeight_inc: Int
  token_inc: Int
  fee_unset: Boolean
  token_unset: Boolean
  fromAccount_unset: Boolean
  isDelegation_unset: Boolean
  fee_inc: Float
  from: String
  fromAccount: TransactionFromAccountUpdateInput
  receiver_unset: Boolean
  kind_unset: Boolean
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

